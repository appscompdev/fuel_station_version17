from odoo import models, fields, api, _
import datetime
import xlwt
from io import BytesIO
import base64
from xlwt import easyxf


class ShiftBasedReport(models.TransientModel):
    _name = 'shift.base.report'
    _description = 'Shift Based Report'

    report_date = fields.Date(string='Date', default=lambda self: fields.Datetime.now())
    start_date = fields.Datetime(string='Start Date', required=True, )
    end_date = fields.Datetime(string='End Date', required=True, )
    shift = fields.Many2many('employee.shift', string='Shift', required=True)
    summary_file = fields.Binary('Report')
    file_name = fields.Char('File Name')
    report_printed = fields.Boolean('Excel Report')
    user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user)
    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)

    def get_pdf_report(self):
        data = {
            'ids': self.ids,
            'model': self._name,
            'form': {
                'start_date': self.start_date,
                'end_date': self.end_date,
            },
            'shift': [j for j in self.shift.ids],
        }

        return self.env.ref('petrol_station_dashboard.report_action_shift_base').report_action(self, data=data)

    def get_excel_report(self):
        workbook = xlwt.Workbook()
        worksheet1 = workbook.add_sheet('Employee Shift Report')
        design_7 = easyxf('align: horiz center;font: bold 1;')
        design_8 = easyxf('align: horiz left;')
        design_9 = easyxf('align: horiz right;font: bold 1;')
        design_12 = easyxf('align: horiz right; pattern: pattern solid, fore_colour gray25;font: bold 1;')
        design_13 = easyxf('align: horiz center;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_14 = easyxf('align: horiz left;font: bold 1;pattern: pattern solid, fore_colour gray25;')

        for i in range(0, 10):
            worksheet1.col(i).width = 6000
        rows = 0

        datas = []
        shift = [j for j in self.shift.ids]
        shift_master = self.env['employee.shift'].search([('id', 'in', shift)])
        shift_value = self.env['petrol.station.pump'].search([('shift_id', 'in', shift)])

        for i in shift_master:
            datas.append({
                'shift_name': i.name,
                'id': i.id,
                'value': []
            })
        for j in datas:
            for i in shift_value:
                if i.shift_id.id == j['id']:
                    pump_data = {}
                    pump_val = []
                    for k in i.pump_entry_ids:
                        if self.start_date <= k.create_date <= self.end_date:
                            val = {
                                'name': k.petrol_pump.name,
                                'start_reading': k.start_reading,
                                'end_reading': k.end_reading,
                                'date': k.create_date.date(),
                                'amt': k.advance_amount,
                                'employee': k.employee_id.name
                            }
                            pump_val.append(val)
                    pump_data['employee'] = i.employee_id.name
                    pump_data['pump_val'] = pump_val
                    j['value'].append(pump_data)

        worksheet1.set_panes_frozen(True)
        worksheet1.set_horz_split_pos(rows + 1)
        worksheet1.write_merge(rows, rows, 0, 5, 'Shift Based Report', design_13)
        rows += 1
        worksheet1.write(rows, 2, 'START DATE', design_14)
        worksheet1.write(rows, 3, self.start_date.strftime('%d-%m-%Y'), design_13)
        rows += 1
        worksheet1.write(rows, 2, 'END DATE', design_14)
        worksheet1.write(rows, 3, self.end_date.strftime('%d-%m-%Y'), design_13)
        rows += 1
        worksheet1.write(rows, 2, 'GENERATED BY', design_14)
        worksheet1.write(rows, 3, self.user_id.name, design_13)
        rows += 3
        cols_heads = ['S.NO', 'NAME', 'START READING', 'END READING', 'DATE', 'AMOUNT']
        tot = 0
        for i in datas:
            worksheet1.write_merge(rows, rows, 2, 3, str(i['shift_name']), design_13)
            rows += 2
            for j in i['value']:
                worksheet1.write(rows, 2, 'Employee:', design_14)
                worksheet1.write(rows, 3, j['employee'], design_13)
                rows += 1
                cols = 0
                for col_head in cols_heads:
                    worksheet1.write(rows, cols, _(col_head), design_13)
                    cols += 1
                rows += 1
                total = 0
                serial_no = 1
                for k in j['pump_val']:
                    date = k['date'].strftime('%d-%m-%Y')
                    worksheet1.write(rows, 0, serial_no, design_7)
                    worksheet1.write(rows, 1, k['name'], design_7)
                    worksheet1.write(rows, 2, k['start_reading'], design_7)
                    worksheet1.write(rows, 3, k['end_reading'], design_7)
                    worksheet1.write(rows, 4, date, design_7)
                    worksheet1.write(rows, 5, self.company_id.currency_id.symbol + '' + str(round(k['amt'], 2)),
                                     design_9)
                    serial_no += 1
                    rows += 1
                    total += k['amt']
                worksheet1.write(rows, 4, 'Total', design_13)
                worksheet1.write(rows, 5, self.company_id.currency_id.symbol + '' + str(round(total, 2)), design_9)
                rows += 2
                tot += total
        worksheet1.write(rows, 4, 'Grand Total', design_13)
        worksheet1.write(rows, 5, self.company_id.currency_id.symbol + '' + str(round(tot, 2)), design_9)
        rows += 1
        fp = BytesIO()
        o = workbook.save(fp)
        fp.read()
        excel_file = base64.b64encode(fp.getvalue())
        self.write({'summary_file': excel_file, 'file_name': f'Employee Shift Based Report.xls',
                    'report_printed': True})
        fp.close()
        return {
            'view_mode': 'form',
            'res_id': self.id,
            'res_model': 'shift.base.report',
            'view_type': 'form',
            'type': 'ir.actions.act_window',
            'context': self.env.context,
            'target': 'new',
        }


class ShiftBaseReport(models.AbstractModel):
    _name = 'report.petrol_station_dashboard.report_shift_wise_template'
    _description = 'Report Shift Based'

    def _get_report_values(self, docids, data=None):
        start_date = datetime.datetime.strptime(data['form']['start_date'], '%Y-%m-%d %H:%M:%S')
        end_date = datetime.datetime.strptime(data['form']['end_date'], '%Y-%m-%d %H:%M:%S')
        shift = data['shift']
        datas = []

        shift_master = self.env['employee.shift'].search([('id', 'in', shift)])
        shift_value = self.env['petrol.station.pump'].search([('shift_id', 'in', shift)])

        for i in shift_master:
            datas.append({
                'shift_name': i.name,
                'id': i.id,
                'value': []
            })
        for j in datas:
            for i in shift_value:
                if i.shift_id.id == j['id']:
                    pump_data = {}
                    pump_val = []
                    for k in i.pump_entry_ids:
                        if start_date <= k.create_date <= end_date:
                            val = {
                                'name': k.petrol_pump.name,
                                'start_reading': k.start_reading,
                                'end_reading': k.end_reading,
                                'date': k.create_date.date(),
                                'amt': k.advance_amount,
                                'employee': k.employee_id.name
                            }
                            pump_val.append(val)
                    pump_data['employee'] = i.employee_id.name
                    pump_data['pump_val'] = pump_val
                    j['value'].append(pump_data)

        return {
            'doc_ids': data['ids'],
            'doc_model': data['model'],
            'start_date': start_date,
            'end_date': end_date,
            'data': datas,
            'today': fields.Date.today().strftime("%d/%m/%Y"),
        }
