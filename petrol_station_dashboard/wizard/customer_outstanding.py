from odoo import models, fields, api, _
import datetime
import xlwt
from io import BytesIO
import base64
from xlwt import easyxf


class ShiftBasedReport(models.TransientModel):
    _name = 'customer.outstanding.report'
    _description = 'Customer Outstanding Report'

    report_date = fields.Date(string='Date', default=lambda self: fields.Datetime.now())
    start_date = fields.Datetime(string='Start Date', required=True, )
    end_date = fields.Datetime(string='End Date', required=True, default=lambda self: fields.Datetime.now())
    partner_ids = fields.Many2many('res.partner', string='Customer')
    summary_file = fields.Binary('Report')
    file_name = fields.Char('File Name')
    report_printed = fields.Boolean('Excel Report')
    user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user)
    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)

    def get_pdf_report(self):
        data = {
            'ids': self.ids,
            'model': self._name,
            'form': {
                'start_date': self.start_date,
                'end_date': self.end_date,
            },
            'partner': [j for j in self.partner_ids.ids],
        }
        return self.env.ref('petrol_station_dashboard.report_action_customer_outstanding').report_action(self, data=data)

    def get_excel_report(self):
        workbook = xlwt.Workbook()
        worksheet1 = workbook.add_sheet('Customer Outstanding Report')
        design_7 = easyxf('align: horiz center;font: bold 1;')
        design_8 = easyxf('align: horiz left;')
        design_9 = easyxf('align: horiz right;font: bold 1;')
        design_12 = easyxf('align: horiz right; pattern: pattern solid, fore_colour gray25;font: bold 1;')
        design_13 = easyxf('align: horiz center;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_14 = easyxf('align: horiz left;font: bold 1;pattern: pattern solid, fore_colour gray25;')

        for i in range(0, 10):
            worksheet1.col(i).width = 6000
        rows = 0

        domain = []
        partner = [j for j in self.partner_ids.ids]
        if partner:
            domain = [('id', 'in', partner)]
        partners = self.env['res.partner'].search(domain)
        account_move = self.env['account.move'].search(
            [('state', '=', 'posted'), ('invoice_date', '>=', self.start_date.date()),
             ('invoice_date', '<=', self.end_date.date())])
        outstanding_val = [{'name': i.name, 'id': i.id, 'count': 0, 'value': 0, 'invoice': [], 'total': 0} for i in
                           partners]

        for i in outstanding_val:
            for j in account_move:
                if i['id'] == j.partner_id.id and j.amount_residual > 0.0:
                    i['total'] += j.amount_total
                    i['count'] += 1
                    i['value'] += j.amount_residual
                    i['invoice'].append({'inv_name': j.name, 'amt': j.amount_residual, 'total': j.amount_total,
                                         'due': j.invoice_date_due})

        worksheet1.set_panes_frozen(True)
        worksheet1.set_horz_split_pos(rows + 1)
        worksheet1.write_merge(rows, rows, 0, 5, 'Customer Outstanding Report', design_13)
        rows += 1
        worksheet1.write(rows, 2, 'START DATE', design_14)
        worksheet1.write(rows, 3, self.start_date.strftime('%d-%m-%Y'), design_13)
        rows += 1
        worksheet1.write(rows, 2, 'END DATE', design_14)
        worksheet1.write(rows, 3, self.end_date.strftime('%d-%m-%Y'), design_13)
        rows += 1
        worksheet1.write(rows, 2, 'GENERATED BY', design_14)
        worksheet1.write(rows, 3, self.user_id.name, design_13)
        rows += 3
        cols_heads = ['S.NO', 'NAME', 'Invoices', 'Total Amount', 'Amount Due']
        cols = 0
        for col_head in cols_heads:
            worksheet1.write(rows, cols, _(col_head), design_13)
            cols += 1
        rows += 1
        serial_no = 1
        total = 0
        for i in outstanding_val:
            if i['count'] or i['value'] or i['invoice']:
                worksheet1.write(rows, 0, serial_no, design_7)
                worksheet1.write(rows, 1, i['name'], design_7)
                worksheet1.write(rows, 2, i['count'], design_7)
                worksheet1.write(rows, 3, self.company_id.currency_id.symbol + '' + str(round(i['total'], 2)), design_9)
                worksheet1.write(rows, 4, self.company_id.currency_id.symbol + '' + str(round(i['value'], 2)), design_9)
                sub_col = 1
                rows += 1
                total += i['value']
                for k in ['Invoice', 'Due Date', 'Amount']:
                    worksheet1.write(rows, sub_col, _(k), design_13)
                    sub_col += 1
                rows += 1
                for j in i['invoice']:
                    due = j['due'].strftime('%d-%m-%Y')
                    worksheet1.write(rows, 1, j['inv_name'], design_7)
                    worksheet1.write(rows, 2, due, design_7)
                    worksheet1.write(rows, 3, self.company_id.currency_id.symbol + '' + str(round(j['total'], 2)),
                                     design_9)
                    worksheet1.write(rows, 4, self.company_id.currency_id.symbol + '' + str(round(j['amt'], 2)),
                                     design_9)
                    rows += 1
                rows += 1
                serial_no += 1
        worksheet1.write(rows, 3, 'Grand Total', design_13)
        worksheet1.write(rows, 4, self.company_id.currency_id.symbol + '' + str(round(total, 2)), design_9)
        fp = BytesIO()
        o = workbook.save(fp)
        fp.read()
        excel_file = base64.b64encode(fp.getvalue())
        self.write({'summary_file': excel_file, 'file_name': f'Customer Outstanding Report.xls',
                    'report_printed': True})
        fp.close()
        return {
            'view_mode': 'form',
            'res_id': self.id,
            'res_model': 'customer.outstanding.report',
            'view_type': 'form',
            'type': 'ir.actions.act_window',
            'context': self.env.context,
            'target': 'new',
        }


class CustomerOutStand(models.AbstractModel):
    _name = 'report.petrol_station_dashboard.customer_outstanding_template'
    _description = 'Customer Outstanding Report'

    def _get_report_values(self, docids, data=None):
        start_date = datetime.datetime.strptime(data['form']['start_date'], '%Y-%m-%d %H:%M:%S')
        end_date = datetime.datetime.strptime(data['form']['end_date'], '%Y-%m-%d %H:%M:%S')
        partner = data['partner']
        datas = []
        domain = []
        if partner:
            domain = [('id', 'in', partner)]
        partners = self.env['res.partner'].search(domain)
        account_move = self.env['account.move'].search(
            [('state', '=', 'posted'), ('invoice_date', '>=', start_date.date()),
             ('invoice_date', '<=', end_date.date())])
        outstanding_val = [{'name': i.name, 'id': i.id, 'count': 0, 'value': 0, 'invoice': [], 'total': 0} for i in
                           partners]

        for i in outstanding_val:
            for j in account_move:
                if i['id'] == j.partner_id.id and j.amount_residual > 0.0:
                    i['total'] += j.amount_total
                    i['count'] += 1
                    i['value'] += j.amount_residual
                    i['invoice'].append({'inv_name': j.name, 'amt': j.amount_residual, 'total': j.amount_total,
                                         'due': j.invoice_date_due})

        return {
            'doc_ids': data['ids'],
            'doc_model': data['model'],
            'start_date': start_date,
            'end_date': end_date,
            'data': outstanding_val,
            'today': fields.Date.today().strftime("%d/%m/%Y"),
        }
